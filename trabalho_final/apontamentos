48 sementes
14 buracos (2 filas de 6buracos; 2buracos, 1 em cada extremidade(depositos))

Vencedor: obter 25 sementes ou +

REGRAS:
-> 1º a jogar: aquele que adivinhar em que mão a sememte está
	Fazer vez aleatoria?

Cada jogador: 6 buracos e deposito á direita

	
	MOVIMENTOS
	->no inicio, 4 sementes em cada casa
	->colhe todas as sementes do seu buraco e distribui uma a uma nos buracos seguintes, sentido contrario ao relogio
	->se a casa tiver + que 12 sementes, dá volta completa ao tabuleiro e salta a casa de onde partiu
	->não pode mexer em casas com apenas 1 semente se houver outras casa com +

	CAPTURAS:
	->ao depositarmos a ultima semente numa casa adversaria com 2 ou 3 sementes (contando com a semente que depositamos), podemos captura-las (metemo-las no deposito). Todas as casas anteriores que tiverem 2 ou 3 sementes e pertençam ao adversario podemos capturá las (até encontrar uma casa que nao cumpra estas condiçoes).

	REGRAS SUPLEMENTARES
	Quando um dos jogadores fica sem sementes.
	-> o adversario é obrigado a efetuar um movimento que introduza sementes do outro lado
	->se o jogador realizar uma captura e deixar o adversario sem sementes, este tem que afetuar outra jogada de modo a introduzir sementes nas casas do adversário (se o jogador nao tiver sementes a partida finaliza)

	FIM DA PARTIDA
	->Quando um jogador capturar 25 ou mais sementes
	->Quando um jogador fica sem sementes e o adversario não pode colocar sementes do lado do jogador, a partida termina e o adversario recolhe as sementes que estao nas suas casas para o seu deposito. Ganha quem tiver mais sementes
	->Quando a partida está a finalizar e encontramo nos numa situaçao que se repete ciclicamente, sem que os jogadores possam evita lo, cada jogador recolhe as sementes das suas casa. Ganha quem tiver mais sementes.



	+-------+-------+-------+-------+-------+-------+-------+-------+
	|		|1		|2		|3		|4		|5		|6		|		|
	|		|	4	|	4	|	4	|	4	|	4	|	4	|		|
	|		|_______|_______|_______|_______|_______|_______|		|	
	|		|1		|2		|3		|4		|5		|6		|		|
	|		|	4	|	4	|	4	|	4	|	4	|	4	|		|
	|		|		|		|		|		|		|		|		|
	+-------+-------+-------+-------+-------+-------+-------+-------+





1       4 4 4 4 4 4                             1 2 3 4 5 6

2       4 4 4 4 4 4								1 2 3 4 5 6
												6 5 4 3 2 1

ia
row 1
opponent 2


https://github.com/myrmarachne/mancala-prolog/blob/master/main.pl
http://blog.melindalu.com/2013-01-30-mancala.html
https://github.com/LynxEyes/ouri
https://github.com/myrmarachne/mancala-prolog/blob/master/basic_rules.pl
https://stackabuse.com/minimax-and-alpha-beta-pruning-in-python/
https://www.geeksforgeeks.org/minimax-algorithm-in-game-theory-set-4-alpha-beta-pruning/


https://gist.github.com/exallium/1446104/5109388cfc21578f555dcac0ba54da680326af7b
https://github.com/138paulmiller/Mancala-AI-Bot/blob/master/mancala.py
https://github.com/cypreess/py-mancala/blob/master/mancala.py
https://stackabuse.com/minimax-and-alpha-beta-pruning-in-python/
https://towardsdatascience.com/create-ai-for-your-own-board-game-from-scratch-minimax-part-2-517e1c1e3362
https://pt.wikipedia.org/wiki/Minimax

https://www.cs.swarthmore.edu/~meeden/cs63/s19/labs/03.html


	#opponet don't have any seeds
			if game.opponent_empty():
				moves = game.possible_moves(EMPTY)

				#no moves left
				if not moves:
					game.retrive_seeds()

				else:
					pit = input("->Player move: ")

					#making sure the player's move puts seeds in the opponent side
					while int(pit) not in moves:
						pit = input("->Player move:")

					game.make_move(int(pit))

			#normal move
			else:
				pit = input("->Player move: ")

				while not game.valid_move(int(pit)):
					pit = input("->Player move: ")

				last_pit = game.make_move(int(pit))

				if last_pit > 5:
					game.capture(last_pit)


0 6 6 idx + seeds > 5
1 5

0 1 2 3 4 5
0 0 0 0 0 0


https://github.com/cypreess/py-mancala/blob/master/mancala.py
https://github.com/suryaiyer/Intelligent-Agent/blob/master/src/Minimax.py
https://github.com/suryaiyer/Intelligent-Agent/blob/master/src/mancala.py

def possible_moves(self):
		moves = list()

		if self.opponent_empty():
			for idx in range(6):
				if self.valid_move(idx):
				seeds = self.board[0][idx]

				if idx+seeds > 5:
					moves.append(idx)

		else:
			for idx in range(6):

				if self.valid_move(idx):
					moves.append(idx)

				#seeds = self.board[0][idx]

				#if seeds > 0:
					#moves.append(idx)



GO CHECK!!
->https://cs.pomona.edu/~dkauchak/classes/s13/cs311-s13/assignments/assign2.pdf
------>https://github.com/naigutstein/Mancala/blob/master/Player.py
->https://github.com/suryaiyer/Intelligent-Agent/blob/master/src/Minimax.py#L10
https://github.com/138paulmiller/Mancala-AI-Bot/blob/master/mancala.py
https://github.com/cypreess/py-mancala/blob/master/mancala.py


if side == self.player_turn and pit == jump: 
				pit += 1

			if pit == 6:
				row, opponent_row, side = self.switch_sides(row, opponent_row)
				pit = 0

			row[pit] += 1
			seeds -= 1
			pit += 1